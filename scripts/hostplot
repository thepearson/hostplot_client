#!/usr/bin/env python

import sys
import os
import time
import platform
import optparse

from hostplot.core import Config
from hostplot.core.Api import *
from hostplot.core.Cache import Cache
from hostplot.core.Metrics import Metrics
from hostplot.core.Runner import Runner

APP_VERSION = "0.30"
DEFAULT_APP_NAME="hostplot"
DEFAULT_METRIC_NAME="metrics"
DEFAULT_TMP_DIR='/tmp'
DEFAULT_CONFIG_FILE="/etc/" + DEFAULT_APP_NAME + ".conf"
DEFAULT_API_PROTOCOL='http'
DEFAULT_API_SERVER="api.hostplot.me"
DEFAULT_API_PATH="/client"
DEFAULT_METRIC_TTL="30"


def get_version():
  return APP_VERSION

'''
Run default action
'''
def main(config, dry):

  # Get the metrics
  metrics = Metrics(config, dry).get();

  # Create an instance of the runner, this
  # will run all the metrics passed in
  r = Runner(metrics)

  # load the cache
  cache = Cache(DEFAULT_TMP_DIR + '/hostplot.cache')

  metrics = r.run()
  if cache.has_cache() is True:
    metrics.update(cache.cache_get())

  data = {"metrics": metrics, "uuid": config.get('uuid')}

  if dry is not True:
    # returned data
    api = MetricsApi(config)
    response = api.saveHostMetrics(data)
    if response is None:
      print "Metrics not saved, transmission issues"
      cache.cache_save(metrics)
    else:
      if cache.has_cache() is True:
        cache.cache_clear()
  else:
    print data


'''
Initialize the host
'''
def initialize(code):
  print "Initializing " + code

  while True:
    config_file = raw_input('Config file path?: [' + DEFAULT_CONFIG_FILE + '] ').lower()
    if str(config_file).strip() == '':
      config_file = DEFAULT_CONFIG_FILE
      break
    else:
      try:
        # see if it's writable
        update = open(config_file, 'w')
        update.close()
      except:
        print 'Error creating config file! Check permissions.'
        exit()
      break

  # open config file and add api defaults
  config = Config.Config(config_file)
  config.add('protocol', DEFAULT_API_PROTOCOL, 'api')
  config.add('host', DEFAULT_API_SERVER, 'api')
  config.add('metric_path', DEFAULT_API_PATH, 'api')
  config.add('code', code)

  config.add('metrics_ttl', DEFAULT_METRIC_TTL, 'config')
  config.add('metrics_last', "0", 'config')

  client = InitApi(config);
  obj = client.activateHost(code);

  try:
    if obj['uuid'] is not None:
      host_uuid = obj['uuid']
      config.add('uuid', host_uuid)
      updateHostInfo(config, obj)
    else:
      print 'Failed: ' + obj['message']
      exit()
  except:
    print "Host code is invalid, please try again."
    exit()

  print 'Host is now active, please set up the following cron job:\n\n'
  print '*\t*\t*\t*\t*\tpython ' +  os.getcwd() + '/' + DEFAULT_APP_NAME + ' -c ' + config_file + '\n\n'
  config.save()
  exit()


def update(config):
  """ retrieves info from the server then updates the server with local vars """
  uuid = config.get('uuid')
  client = HostApi(config)
  host_model = client.getHostInfo(uuid)
  updateHostInfo(config, host_model)

def updateHostInfo(config, model):
  """ updates the server with local variables """
  model['client_version'] = APP_VERSION
  model['hostname'] = platform.node()
  model['platform'] = platform.system()

  client = HostApi(config)
  host_model = client.updateHostInfo(model)



if __name__ == "__main__":
  # parse cmd line arguments
  parser = optparse.OptionParser()
  parser.add_option('-i', '--init', help='Install and initialise host', dest='init')
  parser.add_option('-c', '--config', help='Config file to use', dest='config')
  parser.add_option('-u', '--update', action="store_true",  dest='update', help='Check for updates')
  parser.add_option('-d', '--dry-run', action="store_true", dest='dry', help='Dry run (no communication with server)')
  (opts, args) = parser.parse_args()

  if opts.config is not None:
    config = opts.config
  else:
    config = DEFAULT_CONFIG_FILE

  if opts.init is not None:
    initialize(opts.init)
  else:
    try:
      open(config, "r")
    except:
      print "Config file doesn't exist, please specify one or initialize the host first"
      parser.print_help()
      quit()

    if opts.update is True:
      if opts.config is not None:
        update(Config.Config(config))
      else:
        update(Config.Config(config))
    else:
      dry = False
      if opts.dry is not None:
        dry = True

      main(Config.Config(config), dry)

  exit()
